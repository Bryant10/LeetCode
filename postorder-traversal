/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
// 要保证根结点在左孩子和右孩子访问之后才能访问，因此对于任一结点P，先将其入栈。
// 如果P不存在左孩子和右孩子，则可以直接访问它；
// 或者P存在孩子，但是其孩子都已被访问过了，则同样可以直接访问该结点
// 若非上述两种情况，则将P的右孩子和左孩子依次入栈，这样就保证了
// 每次取栈顶元素的时候，左孩子在右孩子前面被访问，左孩子和右孩子都在根结点前面被访问。
import java.util.*;
public class Solution {
    public ArrayList<Integer> postorderTraversal(TreeNode root) {
        ArrayList<Integer> list= new ArrayList<>();
        if(root==null)
            return list;
        Stack<TreeNode> stack =new Stack<>();
        TreeNode pre=null;
        stack.push(root);
        while(!stack.isEmpty()){
            TreeNode cur=stack.peek();
            if((cur.left==null && cur.right==null) || (pre!=null && (pre==cur.left || pre==cur.right))){
                list.add(cur.val);
                stack.pop();
                pre=cur;
            }
            else{
                if(cur.right!=null)
                    stack.push(cur.right);
                if(cur.left!=null)
                    stack.push(cur.left);
            }
        }
        return list;
    }
}
