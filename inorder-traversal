/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
 /** 
     * 迭代实现，首先依次将左子节点全部加入栈中，所以第一个while循环后栈顶元素对应一个子树的最 
     * 左子节点，然后将该元素出栈加入list，并判断该元素的遍历该节点的右子树。 
     * @param root 
     * @return 
     */ 
import java.util.*;
public class Solution {
    public ArrayList<Integer> postorderTraversal(TreeNode root) {
        ArrayList<Integer> list= new ArrayList<>();
        if(root==null)
            return list;
        Stack<TreeNode> stack =new Stack<>();
        do {  
            //依次将左节点均加入栈中  
            while(root != null) {  
                stack.push(root);  
                root = root.left;  
            }  
            if (!stack.isEmpty()) {  
                root = stack.pop();  
                list.add(root.val);    
                root = root.right;  
            }  
        } while(!stack.isEmpty() || root != null);  
        return list;
    }
}
